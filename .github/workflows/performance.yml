name: 성능 테스트

on:
  schedule:
    - cron: '0 6 * * 1'   # 매주 월요일 오후 3시 (UTC 06:00 = KST 15:00)
  workflow_dispatch:     # 수동 실행 가능
  push:
    branches: [ master ]
    paths: [ '.github/workflows/performance.yml' ]
    inputs:
      target_url:
        description: '테스트할 URL'
        required: true
        default: 'http://localhost:8080'
      duration:
        description: '테스트 지속 시간 (초)'
        required: true
        default: '60'

jobs:
  load-test:
    name: 부하 테스트
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: byeolnight_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: JDK 21 설정
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: MySQL 연결 대기
      run: |
        echo "MySQL 서비스 연결 대기 중..."
        for i in {1..30}; do
          if MYSQL_PWD=test mysqladmin ping -h 127.0.0.1 -P 3306 -u root --silent; then
            echo "✅ MySQL 연결 성공"
            break
          fi
          echo "대기 중... ($i/30)"
          sleep 2
        done

    - name: 백엔드 서버 시작
      run: |
        chmod +x ./gradlew
        nohup ./gradlew bootRun --args='--spring.profiles.active=test' > server.log 2>&1 &
        echo $! > server.pid
        echo "서버 PID: $(cat server.pid)"
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/byeolnight_test
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: test
        SPRING_DATA_REDIS_HOST: localhost
        SPRING_DATA_REDIS_PORT: 6379
        JWT_SECRET: ${{ secrets.JWT_SECRET_TEST }}

    - name: 서버 시작 대기
      run: |
        echo "서버 시작 대기 중..."
        for i in {1..60}; do
          if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
            echo "✅ 서버가 시작되었습니다."
            break
          elif [ $i -eq 30 ]; then
            echo "⚠️ 서버 로그 확인:"
            tail -20 server.log || echo "로그 파일 없음"
          fi
          echo "대기 중... ($i/60)"
          sleep 5
        done
        
        if ! curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
          echo "❌ 서버 시작 실패 - 로그 출력:"
          cat server.log || echo "로그 파일 없음"
          exit 1
        fi

    - name: K6 설치
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: 부하 테스트 스크립트 생성
      run: |
        cat > load-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        import { Rate } from 'k6/metrics';

        export let errorRate = new Rate('errors');

        export let options = {
          stages: [
            { duration: '30s', target: 10 },  // 30초간 10명까지 증가
            { duration: '1m', target: 10 },   // 1분간 10명 유지
            { duration: '30s', target: 20 },  // 30초간 20명까지 증가
            { duration: '1m', target: 20 },   // 1분간 20명 유지
            { duration: '30s', target: 0 },   // 30초간 0명까지 감소
          ],
          thresholds: {
            http_req_duration: ['p(95)<500'],  // 95%의 요청이 500ms 이하
            errors: ['rate<0.1'],              // 에러율 10% 이하
          },
        };

        const BASE_URL = __ENV.TARGET_URL || 'http://localhost:8080';

        export default function() {
          // 1. 헬스체크 API
          let response = http.get(`${BASE_URL}/actuator/health`);
          check(response, {
            'health status is 200': (r) => r.status === 200,
            'health response time < 200ms': (r) => r.timings.duration < 200,
          }) || errorRate.add(1);

          // 2. 게시글 목록 API
          response = http.get(`${BASE_URL}/api/posts?page=0&size=10`);
          check(response, {
            'posts status is 200': (r) => r.status === 200,
            'posts response time < 500ms': (r) => r.timings.duration < 500,
          }) || errorRate.add(1);

          // 3. 게시글 상세 API (ID=1 가정)
          response = http.get(`${BASE_URL}/api/posts/1`);
          check(response, {
            'post detail status is 200 or 404': (r) => r.status === 200 || r.status === 404,
            'post detail response time < 300ms': (r) => r.timings.duration < 300,
          }) || errorRate.add(1);

          // 4. 댓글 목록 API
          response = http.get(`${BASE_URL}/api/posts/1/comments`);
          check(response, {
            'comments status is 200 or 404': (r) => r.status === 200 || r.status === 404,
            'comments response time < 400ms': (r) => r.timings.duration < 400,
          }) || errorRate.add(1);

          // 5. 카테고리별 게시글 API
          response = http.get(`${BASE_URL}/api/posts?category=FREE&page=0&size=5`);
          check(response, {
            'category posts status is 200': (r) => r.status === 200,
            'category posts response time < 500ms': (r) => r.timings.duration < 500,
          }) || errorRate.add(1);

          // 6. 검색 API
          response = http.get(`${BASE_URL}/api/posts/search?keyword=test&page=0&size=5`);
          check(response, {
            'search status is 200': (r) => r.status === 200,
            'search response time < 600ms': (r) => r.timings.duration < 600,
          }) || errorRate.add(1);

          // 7. 인기 게시글 API
          response = http.get(`${BASE_URL}/api/posts/popular?page=0&size=5`);
          check(response, {
            'popular posts status is 200': (r) => r.status === 200,
            'popular posts response time < 500ms': (r) => r.timings.duration < 500,
          }) || errorRate.add(1);

          // 8. 스텔라 상점 API
          response = http.get(`${BASE_URL}/api/shop/items`);
          check(response, {
            'shop items status is 200': (r) => r.status === 200,
            'shop items response time < 400ms': (r) => r.timings.duration < 400,
          }) || errorRate.add(1);

          sleep(1);
        }
        EOF

    - name: 부하 테스트 실행
      run: |
        TARGET_URL="${{ github.event.inputs.target_url || 'http://localhost:8080' }}"
        echo "🎯 테스트 대상 URL: $TARGET_URL"
        k6 run --env TARGET_URL="$TARGET_URL" load-test.js

    - name: 서버 종료
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

    - name: 테스트 결과 업로드
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          *.json
          *.html

  lighthouse:
    name: Lighthouse 성능 측정
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: pnpm 설치
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: 'byeolnight-frontend/pnpm-lock.yaml'

    - name: 프론트엔드 의존성 설치
      run: |
        cd byeolnight-frontend
        pnpm install

    - name: 프론트엔드 빌드 및 서버 시작
      run: |
        cd byeolnight-frontend
        pnpm run build
        pnpm run preview &
        echo $! > ../frontend.pid

    - name: 프론트엔드 서버 대기
      run: |
        echo "프론트엔드 서버 시작 대기 중..."
        for i in {1..20}; do
          if curl -f http://localhost:4173 > /dev/null 2>&1; then
            echo "프론트엔드 서버가 시작되었습니다."
            break
          fi
          echo "대기 중... ($i/20)"
          sleep 3
        done

    - name: Lighthouse CI 실행
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:4173
        configPath: './.lighthouserc.json'
        uploadArtifacts: false
        temporaryPublicStorage: true
      continue-on-error: true

    - name: 프론트엔드 서버 종료
      if: always()
      run: |
        if [ -f frontend.pid ]; then
          kill $(cat frontend.pid) || true
          rm frontend.pid
        fi

  database-performance:
    name: 데이터베이스 성능 테스트
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: byeolnight_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: JDK 21 설정
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Gradle 실행 권한 설정
      run: chmod +x ./gradlew

    - name: MySQL 연결 대기 및 테스트
      run: |
        echo "MySQL 서비스 연결 대기 중..."
        for i in {1..30}; do
          if MYSQL_PWD=test mysqladmin ping -h 127.0.0.1 -P 3306 -u root --silent; then
            echo "✅ MySQL 연결 성공"
            break
          fi
          echo "대기 중... ($i/30)"
          sleep 3
        done
        
        # 데이터베이스 연결 및 기본 쿼리 테스트
        MYSQL_PWD=test mysql -h 127.0.0.1 -P 3306 -u root -e "SELECT 1 as test_connection;" byeolnight_test
        MYSQL_PWD=test mysql -h 127.0.0.1 -P 3306 -u root -e "SHOW TABLES;" byeolnight_test
        echo "✅ 데이터베이스 성능 테스트 완료"