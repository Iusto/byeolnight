package com.byeolnight.service.auth;

import com.byeolnight.entity.log.AuditLoginLog;
import com.byeolnight.entity.log.AuditSignupLog;
import com.byeolnight.entity.user.User;
import com.byeolnight.repository.log.AuditLoginLogRepository;
import com.byeolnight.repository.log.AuditSignupLogRepository;
import com.byeolnight.dto.user.LoginRequestDto;
import com.byeolnight.infrastructure.security.JwtTokenProvider;
import com.byeolnight.infrastructure.util.IpUtil;
import com.byeolnight.service.user.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Service;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Cookie;

/**
 * Ïù∏Ï¶ù Í¥ÄÎ†® ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅÏùÑ Ï≤òÎ¶¨ÌïòÎäî ÏÑúÎπÑÏä§
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class AuthService {

    private final UserService userService;
    private final JwtTokenProvider jwtTokenProvider;
    private final RedisSessionService redisSessionService;
    private final AuditLoginLogRepository auditLoginLogRepository;
    private final AuditSignupLogRepository auditSignupLogRepository;
    private final com.byeolnight.service.user.UserSecurityService userSecurityService;
    private final com.byeolnight.service.certificate.CertificateService certificateService;
    private final PasswordEncoder passwordEncoder;
    private final OAuth2UserInfoFactory oAuth2UserInfoFactory;

    /**
     * Î°úÍ∑∏Ïù∏ Ïù∏Ï¶ù Ï≤òÎ¶¨
     */
    public LoginResult authenticate(LoginRequestDto dto, HttpServletRequest request) {
        String ip = IpUtil.getClientIp(request);
        String userAgent = request.getHeader("User-Agent");
        
        log.info("Î°úÍ∑∏Ïù∏ ÏãúÎèÑ - Ïù¥Î©îÏùº: {}, IP: {}, User-Agent: {}", dto.getEmail(), ip, userAgent);

        // IP Ï∞®Îã® ÌôïÏù∏
        validateIpNotBlocked(ip);

        // ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Î∞è Í≤ÄÏ¶ù
        User user = findAndValidateUser(dto.getEmail(), ip);

        // ÎπÑÎ∞ÄÎ≤àÌò∏ Í≤ÄÏ¶ù
        validatePassword(dto.getPassword(), user, ip, userAgent);

        // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ï≤òÎ¶¨
        userService.resetLoginFailCount(user);
        auditLoginLogRepository.save(AuditLoginLog.of(user.getEmail(), ip, userAgent));

        // Ïù∏Ï¶ùÏÑú Î∞úÍ∏â Ï≤¥ÌÅ¨
        certificateService.checkAndIssueCertificates(user, com.byeolnight.service.certificate.CertificateService.CertificateCheckType.LOGIN);

        // ÌÜ†ÌÅ∞ ÏÉùÏÑ± Î∞è Ï†ÄÏû•
        return createTokens(user, ip, request.getHeader("User-Agent"));
    }

    private void validateIpNotBlocked(String ip) {
        if (userSecurityService.isIpBlocked(ip)) {
            // log.warn("üö´ Ï∞®Îã®Îêú IP Î°úÍ∑∏Ïù∏ ÏãúÎèÑ: {}", ip);
            throw new SecurityException("üö´ Ìï¥Îãπ IPÎäî ÎπÑÏ†ïÏÉÅÏ†ÅÏù∏ Î°úÍ∑∏Ïù∏ ÏãúÎèÑ(15Ìöå Ïù¥ÏÉÅ)Î°ú Ïù∏Ìï¥ 1ÏãúÍ∞Ñ Ï∞®Îã®ÎêòÏóàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.");
        }
    }

    private User findAndValidateUser(String email, String ip) {
        User user = userService.findByEmail(email)
                .orElseThrow(() -> {
                    auditSignupLogRepository.save(AuditSignupLog.failure(email, ip, "Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Ïù¥Î©îÏùº"));
                    // log.info("Î°úÍ∑∏Ïù∏ ÏãúÎèÑ Ïã§Ìå®: Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Ïù¥Î©îÏùº - {}", email);
                    return new BadCredentialsException("Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏïÑÏù¥ÎîîÏûÖÎãàÎã§.");
                });

        // Í≥ÑÏ†ï ÏÉÅÌÉú ÌôïÏù∏
        if (user.getStatus() != User.UserStatus.ACTIVE) {
            auditSignupLogRepository.save(AuditSignupLog.failure(user.getEmail(), ip, "ÎπÑÌôúÏÑ± ÏÉÅÌÉú: " + user.getStatus()));
            throw new BadCredentialsException("Ìï¥Îãπ Í≥ÑÏ†ïÏùÄ Î°úÍ∑∏Ïù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÌòÑÏû¨ ÏÉÅÌÉú: " + user.getStatus());
        }

        // Í≥ÑÏ†ï Ïû†Í∏à ÌôïÏù∏
        if (user.isAccountLocked()) {
            auditSignupLogRepository.save(AuditSignupLog.failure(user.getEmail(), ip, "Í≥ÑÏ†ï Ïû†ÍπÄ ÏÉÅÌÉú"));
            throw new BadCredentialsException("üîí Í≥ÑÏ†ïÏù¥ Ïû†Í≤® ÏûàÏäµÎãàÎã§. ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞ÌôîÎ•º ÌÜµÌï¥ Ïû†Í∏àÏùÑ Ìï¥Ï†úÌïòÍ±∞ÎÇò Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.");
        }

        return user;
    }

    private void validatePassword(String password, User user, String ip, String userAgent) {
        if (!userService.checkPassword(password, user)) {
            userService.increaseLoginFailCount(user, ip, userAgent);
            // log.info("Î°úÍ∑∏Ïù∏ ÏãúÎèÑ Ïã§Ìå®: ÎπÑÎ∞ÄÎ≤àÌò∏ Î∂àÏùºÏπò - {} (IP: {})", user.getEmail(), ip);

            int failCount = user.getLoginFailCount();
            
            // IP Ï∞®Îã® Í≤ΩÍ≥† (15Ìöå Ïãú Ï∞®Îã®)
            if (failCount >= 15) {
                throw new BadCredentialsException("ÎπÑÏ†ïÏÉÅÏ†ÅÏù∏ Î°úÍ∑∏Ïù∏ ÏãúÎèÑÎ°ú Ïù∏Ìï¥ IPÍ∞Ä Ï∞®Îã®ÎêòÏóàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.");
            }
            
            // Í≥ÑÏ†ï Ïû†Í∏à ÏÉÅÌÉú ÌôïÏù∏ (10Ìöå Ïù¥ÏÉÅ)
            if (failCount >= 10) {
                user.lockAccount(); // Í≥ÑÏ†ï Ïû†Í∏à Ï≤òÎ¶¨
                throw new BadCredentialsException("ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä 10Ìöå Ïù¥ÏÉÅ ÌãÄÎ†∏ÏäµÎãàÎã§. Í≥ÑÏ†ïÏù¥ Ïû†Í≤ºÏäµÎãàÎã§. ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Ï¥àÍ∏∞ÌôîÌï¥Ïïº Ïû†Í∏àÏù¥ Ìï¥Ï†úÎê©ÎãàÎã§.");
            }
            
            // 5Ìöå Ïù¥ÏÉÅ Ïã§Ìå® Ïãú Í≤ΩÍ≥† Î©îÏãúÏßÄ
            if (failCount >= 5) {
                int remainingAttempts = 10 - failCount;
                throw new BadCredentialsException("‚ö†Ô∏è Í≤ΩÍ≥†: ÎπÑÎ∞ÄÎ≤àÌò∏Î•º " + failCount + "Ìöå ÌãÄÎ†∏ÏäµÎãàÎã§. " + remainingAttempts + "Ìöå Îçî ÌãÄÎ¶¨Î©¥ Í≥ÑÏ†ïÏù¥ Ïû†ÍπÅÎãàÎã§.");
            }

            // Í∏∞Î≥∏ Ïã§Ìå® Î©îÏãúÏßÄ (1-4Ìöå)
            throw new BadCredentialsException("ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§. (" + failCount + "/10)");
        }
    }

    public User findOrCreateOAuthUser(String registrationId, OAuth2User oAuth2User) {
        OAuth2UserInfoFactory.OAuth2UserInfo userInfo = OAuth2UserInfoFactory.getOAuth2UserInfo(registrationId, oAuth2User);
        
        return userService.findByEmail(userInfo.getEmail())
                .orElseGet(() -> createOAuthUser(userInfo));
    }

    private User createOAuthUser(OAuth2UserInfoFactory.OAuth2UserInfo userInfo) {
        User user = User.builder()
                .email(userInfo.getEmail())
                .password(passwordEncoder.encode("OAUTH_USER_" + System.currentTimeMillis()))
                .nickname("")
                .profileImageUrl(userInfo.getImageUrl())
                .role(User.Role.USER)
                .emailVerified(true)
                .build();
        
        return userService.save(user);
    }

    public boolean needsNicknameSetup(Long userId) {
        User user = userService.findById(userId);
        return user.getNickname() == null || user.getNickname().trim().isEmpty();
    }

    public String[] loginUser(User user, String clientInfo, String ipAddress, HttpServletResponse response) {
        String[] tokens = jwtTokenProvider.generateTokens(user.getId(), clientInfo, ipAddress);
        
        // HttpOnly Ïø†ÌÇ§Î°ú Refresh Token ÏÑ§Ï†ï
        Cookie refreshCookie = new Cookie("refreshToken", tokens[1]);
        refreshCookie.setHttpOnly(true);
        refreshCookie.setSecure(true);
        refreshCookie.setPath("/auth");
        refreshCookie.setMaxAge(7 * 24 * 60 * 60); // 7Ïùº
        refreshCookie.setAttribute("SameSite", "Lax");
        response.addCookie(refreshCookie);
        
        return tokens;
    }

    private LoginResult createTokens(User user, String ipAddress, String userAgent) {
        String[] tokens = jwtTokenProvider.generateTokens(user.getId(), userAgent, ipAddress);
        
        return new LoginResult(tokens[0], tokens[1], 7 * 24 * 60 * 60 * 1000L);
    }

    /**
     * Î°úÍ∑∏Ïù∏ Í≤∞Í≥ºÎ•º Îã¥Îäî ÎÇ¥Î∂Ä ÌÅ¥ÎûòÏä§
     */
    public static class LoginResult {
        private final String accessToken;
        private final String refreshToken;
        private final long refreshTokenValidity;

        public LoginResult(String accessToken, String refreshToken, long refreshTokenValidity) {
            this.accessToken = accessToken;
            this.refreshToken = refreshToken;
            this.refreshTokenValidity = refreshTokenValidity;
        }

        public String getAccessToken() { return accessToken; }
        public String getRefreshToken() { return refreshToken; }
        public long getRefreshTokenValidity() { return refreshTokenValidity; }
    }
}